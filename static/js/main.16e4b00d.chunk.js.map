{"version":3,"sources":["components/layout/Container.tsx","components/layout/Section.tsx","api/calendar/index.ts","components/buttons/Button.tsx","components/buttons/ButtonGroup.tsx","components/calendar/item/Default.tsx","components/calendar/item/Count.tsx","components/calendar/item/News.tsx","components/calendar/item/Notes.tsx","components/calendar/item/index.tsx","components/calendar/CalendarEntry.tsx","components/calendar/Calendar.tsx","components/news/News.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","main","Section","div","mockItems","id","type","title","count","items","CalendarAPI","date","Date","setDate","getDate","Array","fill","undefined","map","o","i","toISOString","length","ButtonStyled","button","selected","css","Button","children","ButtonGroupStyled","nav","ButtonGroup","DefaultItem","item","CountStyled","cite","color","Count","value","NewsItem","NotesItem","Item","CalendarEntryStyled","article","CalendarEntry","onSelect","formattedDate","useMemo","today","parsedDate","getMonth","getFullYear","month","Intl","DateTimeFormat","format","weekday","aria-selected","onClick","CalendarStyled","section","Calendar","selectedItemId","News","useState","selectedId","setSelectedId","style","padding","textAlign","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16e4b00d.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.main`\n  max-width: 58rem;\n  margin: 3rem auto;\n  padding: 0.65rem;\n  border: 1px solid var(--button-border-color);\n  background-color: var(--main__bg-color);\n`;\n","import styled from \"styled-components\";\n\nexport const Section = styled.div`\n  background-color: var(--secondary__bg-color);\n  margin: 0.65rem 0;\n  min-height: 5rem;\n  \n  &:last-of-type {\n    margin-bottom: 0;\n  }\n`\n","import {CalendarEntries} from \"../../components/calendar/types\";\n\nconst mockItems = [\n  [\n    {\n      id: \"1.1\",\n      type: \"default\",\n      title: \"Director Dealing\",\n      count: 12\n    },\n    {\n      id: \"1.2\",\n      type: \"notes\",\n      title: \"Broker Notes\",\n      count: 2\n    }\n  ],\n  [\n    {\n      id: \"1.2\",\n      type: \"notes\",\n      title: \"Broker Notes\",\n      count: 12\n    }\n  ],\n  [\n    {\n      id: \"1.2\",\n      type: \"news\",\n      title: \"News\",\n      count: 5\n    }\n  ],\n  [\n    {\n      id: \"1.1\",\n      type: \"default\",\n      title: \"Director Dealing\",\n      count: 7\n    },\n  ]\n] as any;\n\nconst items = [0, 1, 2, 3, 2, 3];\n\nexport const CalendarAPI = {\n  getItems: (): CalendarEntries => {\n    const date = new Date();\n    date.setDate(date.getDate() - 3);\n\n    return Array(40).fill(undefined).map((o, i) => {\n      date.setDate(date.getDate() + 1);\n\n      return {\n        id: `id-${i}`,\n        date: date.toISOString(),\n        items: mockItems[items[i % items.length]]\n      }\n    })\n  },\n}\n","import React, {ReactNode} from \"react\";\nimport styled, {css} from \"styled-components\";\n\ntype ButtonProps = {\n  children: ReactNode;\n  selected?: boolean\n}\n\nconst ButtonStyled = styled.button<ButtonProps>`\n  border: 1px solid var(--button-border-color);\n  border-radius: var(--button__border-radius);\n  background-color: var(--button__bg-color);\n  color: var(--button__color);\n  font-size: 1rem;\n  padding: 0.35rem 0.75rem;\n  white-space: nowrap;\n  cursor: pointer;\n\n  ${(({selected}) => selected && css`\n    border-color: var(--button-border-color--selected);\n    background-color: var(--button__bg-color--selected);\n    color: var(--button__color--selected);\n    font-weight: bold;\n    cursor: default;\n    pointer-events: none;\n  `)};\n`\n\nexport const Button = ({children, selected}: ButtonProps) => (\n  <ButtonStyled selected={selected}>\n    {children}\n  </ButtonStyled>\n);\n\n","import React, {ReactNode} from \"react\";\nimport styled from \"styled-components\";\n\ntype ButtonGroupProps = {\n  children: ReactNode;\n}\n\nconst ButtonGroupStyled = styled.nav`\n  display: flex;\n  justify-content: flex-end;\n  flex-wrap: wrap;\n\n  button:not(:first-of-type):not(:last-of-type) {\n    border-radius: 0;\n  }\n  \n  button:not(:last-of-type) {\n    border-right: none;\n  }\n  \n  button:first-of-type {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  \n  button:last-of-type {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n`\n\nexport const ButtonGroup = ({children}: ButtonGroupProps) => (\n  <ButtonGroupStyled>\n    {children}\n  </ButtonGroupStyled>\n);\n","import React from \"react\";\n\nimport {ItemProps} from \"./index\";\n\nexport const DefaultItem = ({item}: ItemProps) => (\n  <aside>{item.title}</aside>\n)\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype CountProps = {\n  value: number;\n  color?: string; // Wouldn't normally do it like this - with more time would probably make this a 'type' value\n}\n\nconst CountStyled = styled.cite<Pick<CountProps, 'color'>>`\n  background-color: ${({color}) => color || \"red\"};\n  color: #fff;\n  padding: 0.1rem;\n  line-height: 1;\n  font-style: normal;\n  font-weight: bolder;\n  border-radius: 0.2rem;\n  margin-right: 0.4rem;\n  min-width: 1rem;\n  text-align: center;\n  display: inline-block;\n`\n\nexport const Count = ({value, color}: CountProps) => (\n  <CountStyled color={color}>\n    {value}\n  </CountStyled>\n);\n","import React from \"react\";\n\nimport {ItemProps} from \"./index\";\nimport {Count} from \"./Count\";\n\nexport const NewsItem = ({item}: ItemProps) => (\n  <aside>\n    <Count value={item.count} color=\"#4A5BE2\"/>\n    {item.title}\n  </aside>\n)\n","import React from \"react\";\n\nimport {ItemProps} from \"./index\";\nimport {Count} from \"./Count\";\n\nexport const NotesItem = ({item}: ItemProps) => (\n  <aside>\n    <Count value={item.count} color=\"#068A9E\"/>\n    {item.title}\n  </aside>\n)\n","import React from \"react\";\n\nimport {CalendarItem} from \"../types\";\nimport {DefaultItem} from \"./Default\";\nimport {NewsItem} from \"./News\";\nimport {NotesItem} from \"./Notes\";\n\nexport type ItemProps = {\n  item: CalendarItem;\n}\n\n// not that useful here as it's just the count+colour that's different but a simple example of a factory for rendering different types of 'CalendarItem' components\nexport const Item = ({item}: ItemProps) => {\n  if (item.type === \"news\") {\n    return <NewsItem item={item}/>\n  } else if (item.type === \"notes\") {\n    return <NotesItem item={item}/>\n  }\n  // etc...\n\n  return <DefaultItem item={item}/>\n}\n","import styled, {css} from \"styled-components\";\nimport React, {useMemo} from \"react\";\nimport {CalendarEntry as CalendarEntryType} from \"./types\";\nimport {Item} from \"./item\";\n\nexport type CalendarEntryProps = {\n  selected?: boolean;\n  item: CalendarEntryType;\n  onSelect: (item: CalendarEntryType) => void;\n}\n\nconst CalendarEntryStyled = styled.article<Pick<CalendarEntryProps, 'selected'>>`\n  min-width: 8rem;\n  min-height: 8rem;\n  cursor: pointer;\n  font-size: 0.8rem;\n\n  header {\n    padding: 0.2rem;\n    background-color: var(--accent__bg-color);\n    border-bottom: 1px solid var(--accent__color);\n    text-align: center;\n    color: #8E919A;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    \n    li {\n      padding: 0.25rem 0.35rem;\n      margin: 0;\n    }\n  }\n\n  ${({selected}) => selected && css`\n    &, header {\n      background-color: var(--button__bg-color--secondary-selected);\n      color: var(--button__color--selected);\n      border-color: var(--button-border-color--selected);\n    }\n    \n    header {\n      background-color: var(--button__bg-color--selected);\n    }\n  `}\n`;\n\nexport const CalendarEntry = ({selected = false, item, onSelect}: CalendarEntryProps) => {\n  const {date, items} = item;\n\n  // Quick hacky date formatting... ;) but also an example of memorizing computed value\n  const formattedDate = useMemo(() => {\n    const today = new Date();\n    const parsedDate = new Date(date);\n    if (parsedDate.getDate() === today.getDate() && parsedDate.getMonth() === today.getMonth() && parsedDate.getFullYear() === today.getFullYear()) {\n      return \"TODAY\"\n    }\n    const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(parsedDate);\n    const weekday = new Intl.DateTimeFormat('en', { weekday: 'short' }).format(parsedDate);\n    return `${weekday} ${parsedDate.getDate()} ${month}`;\n  }, [date])\n\n  const handleSelect = () => onSelect(item)\n\n  return (\n    <CalendarEntryStyled\n      aria-selected={selected}\n      selected={selected}\n      onClick={handleSelect}\n    >\n      {/* @TODO: Date would be ISO and formatted */}\n      <header>{formattedDate}</header>\n      {items.length > 0 &&\n      <ul>\n        {items.map(item => (\n          <li key={item.id}>\n            <Item item={item} />\n          </li>\n        ))}\n      </ul>\n      }\n    </CalendarEntryStyled>\n  )\n}\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nimport {CalendarEntry} from \"./CalendarEntry\";\nimport {CalendarEntries, CalendarEntry as CalendarEntryType} from \"./types\";\n\nexport type CalendarProps = {\n  items: CalendarEntries;\n  selectedItemId?: CalendarEntryType[\"id\"];\n  onSelect: (item: CalendarEntryType) => void;\n}\n\n// @TODO: Style scrollbar as per design...\nconst CalendarStyled = styled.section`\n  overflow-x: auto;\n  \n  > ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    \n    > li {\n      padding: 0;\n      margin: 0;\n      border-right: 1px solid var(--accent__color);\n    }\n  }\n`;\n\nexport const Calendar = ({items, onSelect, selectedItemId}: CalendarProps) => (\n  <CalendarStyled>\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>\n          <CalendarEntry item={item} selected={item.id === selectedItemId} onSelect={onSelect}/>\n        </li>\n      ))}\n    </ul>\n  </CalendarStyled>\n);\n","import React, {useState} from \"react\";\n\nimport {Button, ButtonGroup} from \"../buttons\";\nimport {Section} from \"../layout\";\nimport {Calendar} from \"../calendar\";\nimport {CalendarEntries, CalendarEntry} from \"../calendar/types\";\n\nexport type NewsProps = {\n  items: CalendarEntries\n}\n\nexport const News = ({items}: NewsProps) => {\n  const [selectedId, setSelectedId] = useState(\"id-2\"); // @TODO: This ID would be passed through\n\n  const handleSelect = (item: CalendarEntry) => {\n    if (item.id !== selectedId) {\n      console.log(\"propagate some action creator to retrieve the news for this item\", item);\n    }\n\n    setSelectedId(item.id);\n  }\n\n  return (\n    <div>\n      <ButtonGroup>\n        <Button>Summary</Button>\n        <Button>Charts</Button>\n        <Button>Fundamental</Button>\n        <Button>Earnings Analysis</Button>\n        <Button>Drivers</Button>\n        <Button selected={true}>News Flow</Button>\n        <Button>Other</Button><Button>Template</Button>\n      </ButtonGroup>\n\n      <Section>\n        <div style={{padding: \"0.6rem\", textAlign: \"right\"}}>FILTER OPTIONS...</div>\n        <Calendar\n          onSelect={handleSelect}\n          selectedItemId={selectedId}\n          items={items}\n        />\n      </Section>\n\n      <Section>\n        <div style={{padding: \"0.6rem\", textAlign: \"center\"}}>\n          SELECTED NEWS for <strong>\"{selectedId}\"</strong>...\n        </div>\n      </Section>\n    </div>\n  )\n}\n","import React from 'react';\n\nimport {Container} from \"./components/layout\";\nimport {CalendarAPI} from \"./api/calendar\";\nimport {News} from \"./components/news\";\n\n// @TODO: Items would be passed from redux store and the getItems api would be called via an async action creator using useEffect(..., []) hook in a containing component\nconst items = CalendarAPI.getItems()\n\n// @TODO: <Container/> would be some form of redux connected container component\nconst App = () => (\n  <Container>\n    {/* @TODO: Would be contained within a modal or as required */}\n    <News items={items} />\n  </Container>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}